<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>phono3py软件的编译方法</title>
      <link href="/2019/09/25/phono3py-install/"/>
      <url>/2019/09/25/phono3py-install/</url>
      
        <content type="html"><![CDATA[<p>编译环境：Ubuntu18.04.3 LTS<br>phono3py版本：phono3py–1.17.0.post1<br>phonopy版本：phonopy–2.2.0<br>python版本：python–3.6.8</p><h2 id="phono3py概述"><a href="#phono3py概述" class="headerlink" title="phono3py概述"></a><a href="https://atztogo.github.io/phono3py/index.html" target="_blank" rel="noopener">phono3py</a>概述</h2><p>&emsp;&emsp;phono3py是基于超原胞方法计算声子-声子相互作用以及与其相关性质的软件包，可以计算的性质主要包括：</p><ul><li>Lattice thermal conductivity (RTA and <a href="https://atztogo.github.io/phono3py/direct-solution.html#direct-solution" target="_blank" rel="noopener">direct solution of LBTE</a>)</li><li>Phonon lifetime/linewidth</li><li>Imaginary part of self energy</li><li>Joint density of states (JDOS) and weighted-JDOS<br>&emsp;&emsp;phono3py可以与常见的第一性原理计算软件结合使用，例如：<br><a href="https://atztogo.github.io/phono3py/vasp.html#vasp-interface" target="_blank" rel="noopener">VASP</a>, <a href="https://atztogo.github.io/phono3py/pwscf.html#pwscf-interface" target="_blank" rel="noopener">QE</a>, <a href="https://atztogo.github.io/phono3py/crystal.html#crystal-interface" target="_blank" rel="noopener">CRYSTAL</a>, <a href="https://atztogo.github.io/phono3py/turbomole.html#turbomole-interface" target="_blank" rel="noopener">TURBOMOLE</a>等，具体内容可参考<a href="https://atztogo.github.io/phono3py/interfaces.html#calculator-interfaces" target="_blank" rel="noopener">官网说明</a>。<h2 id="phono3py编译方法介绍"><a href="#phono3py编译方法介绍" class="headerlink" title="phono3py编译方法介绍"></a>phono3py编译方法介绍</h2>&emsp;&emsp;对于phono3py的编译是花了许多精力在里边的，尤其是对于新手而言，可能碰到许多奇怪的错误，在<a href="https://www.google.com.hk/" target="_blank" rel="noopener">Google</a>上也没有搜到合适的解决办法，为了新手方便编译，特将编译过程写出来，以供参考。<br>&emsp;&emsp;phono3py的编译主要有3种方法：</li><li>使用conda利用如下命令自动安装：<pre class="line-numbers language-bash"><code class="language-bash">conda <span class="token function">install</span> -c atztogo phono3py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>但是安装完成后phono3py无法使用，会报一些奇怪的错误。</li><li>使用pip利用如下命令自动安装：<pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> phono3py --user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>同样，安装完成后phono3py无法使用，会报一些奇怪的错误。</li><li>基于源码编译安装<h2 id="phono3py源码编译方法"><a href="#phono3py源码编译方法" class="headerlink" title="phono3py源码编译方法"></a>phono3py源码编译方法</h2>说明：由于phono3py的运行依赖于phonopy，因此经过测试后发现，phono3py–1.17.0.post1版本可以与phonopy–2.2.0或phonopy–2.1.4版本兼容，phonopy–2.1.4以前的版本没有测试。但是与phonopy–2.3.0以及phonopy–2.3.0.post5版本不兼容，会报错。</li><li>安装编译环境：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-numpy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-scipy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-h5py<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-scipy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-matplotlib<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-yaml<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libopenblas-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgomp1<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblapack-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblapacke-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-distutils<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>phonopy-2.2.0的下载与编译：<br><a href="https://pypi.org/project/phonopy/2.2.0/#files" target="_blank" rel="noopener">下载</a><br>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf phono3py-1.17.0.post1.tar.gz<span class="token function">cd</span> phono3py-1.17.0.post1.tar.gzpython3.6 setup.py <span class="token function">install</span> --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>phono3py的下载与编译：<br><a href="https://pypi.org/project/phono3py/#files" target="_blank" rel="noopener">下载</a><br>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf phono3py-1.17.0.post1.tar.gz<span class="token function">cd</span> phono3py-1.17.0.post1.tar.gzpython3.6 setup.py <span class="token function">install</span> --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>设置环境变量：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token function">export</span> PYTHONPATH<span class="token operator">=</span>~/.local/lib/python3.6/site-packages:<span class="token variable">$PYTHONPATH</span><span class="token function">export</span> PATH<span class="token operator">=</span>~/.local/bin:<span class="token variable">$PATH</span><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>测试结果：<br><img src="/image/phonopy.png" alt="phonopy测试结果"></li></ul><p><img src="/image/phono3py.png" alt="phono3py测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> phono3py </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phono3py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vasp_kpoints文件设置详解</title>
      <link href="/2019/09/25/vasp-kpoints/"/>
      <url>/2019/09/25/vasp-kpoints/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>kpoints</p>]]></content>
      
      
      <categories>
          
          <category> vasp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
            <tag> kpoints </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建根号界面晶体模型</title>
      <link href="/2019/09/25/materials-studio-build/"/>
      <url>/2019/09/25/materials-studio-build/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Materials Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Materials Studio </tag>
            
            <tag> 根号表面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QE和EPW软件的编译</title>
      <link href="/2019/09/25/quantum-espresso-compile/"/>
      <url>/2019/09/25/quantum-espresso-compile/</url>
      
        <content type="html"><![CDATA[<p>编译环境：Ubuntu18.04.2<br>Intel编译器：parallel_studio_xe_2019_update4</p><h2 id="Intel编译器的安装与配置"><a href="#Intel编译器的安装与配置" class="headerlink" title="Intel编译器的安装与配置"></a>Intel编译器的安装与配置</h2><h3 id="Intel编译器的申请"><a href="#Intel编译器的申请" class="headerlink" title="Intel编译器的申请"></a>Intel编译器的申请</h3><p>&emsp;&emsp;使用学校邮箱在<a href="https://software.intel.com/en-us/qualify-for-free-software/student#" target="_blank" rel="noopener">Intel官网</a>可免费申请Intel编译器，使用时间为一年，到期后可重复申请，然后将新申请的license复制到安装路径文件夹license中即可。</p><pre class="line-numbers language-bash"><code class="language-bash">/opt/intel/license<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /opt/intel/bin/compilervars.sh intel64<span class="token function">source</span> /opt/intel/mkl/bin/mklvars.sh intel64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：普通用户配置环境变量需要依据自己的安装路径修改</p><h2 id="二、QE的下载编译"><a href="#二、QE的下载编译" class="headerlink" title="二、QE的下载编译"></a>二、QE的下载编译</h2><h3 id="QE下载"><a href="#QE下载" class="headerlink" title="QE下载"></a>QE下载</h3><p>&emsp;&emsp;在<a href="https://github.com/QEF/q-e/releases" target="_blank" rel="noopener">QE官网</a>下载最新版q-e-qe-6.4.1.tar以及补丁文件backports-6.4.1.diff。</p><h3 id="赝势库的下载"><a href="#赝势库的下载" class="headerlink" title="赝势库的下载"></a>赝势库的下载</h3><p>&emsp;&emsp;一般情况下，为了计算结果的可靠性，在编译完软件时需要测试自带的算例，此时需要联网下载赝势库。考虑到大部分集群无法联网，需要借助于安装了Linux系统的主机下载赝势库。进入test-suite子目录，修改check_pseudo.sh文件，取消部分echo命令前的注释#号，以便及时查看下载进度，修改后的check_pseudo.sh文件如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Copyright (C) 2001-2016 Quantum ESPRESSO group</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This program is free software; you can redistribute it and/or</span><span class="token comment" spellcheck="true"># modify it under the terms of the GNU General Public License</span><span class="token comment" spellcheck="true"># as published by the Free Software Foundation; either version 2</span><span class="token comment" spellcheck="true"># of the License. See the file `License' in the root directory</span><span class="token comment" spellcheck="true"># of the present distribution.</span><span class="token function">source</span> <span class="token variable">${ESPRESSO_ROOT}</span>/test-suite/ENVIRONMENT<span class="token keyword">if</span> <span class="token function">test</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">which</span> curl<span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">if</span> <span class="token function">test</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">wget</span><span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> <span class="token string">"### wget or curl not found: will not be able to download missing PP ###"</span>   <span class="token keyword">else</span>      DOWNLOADER<span class="token operator">=</span><span class="token string">"wget -O"</span>       <span class="token keyword">echo</span> <span class="token string">"wget found"</span>   <span class="token keyword">fi</span><span class="token keyword">else</span>   DOWNLOADER<span class="token operator">=</span><span class="token string">"curl -o"</span>    <span class="token keyword">echo</span> <span class="token string">"curl found"</span><span class="token keyword">fi</span>inputs<span class="token operator">=</span>`find <span class="token variable">$1*</span> -type f -name <span class="token string">"*.in"</span> -not -name <span class="token string">"test.*"</span> -not -name <span class="token string">"benchmark.*"</span><span class="token variable"><span class="token variable">`</span>pp_files<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable">${inputs}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">grep</span> UPF <span class="token variable">${x}</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span><span class="token punctuation">;</span> done`<span class="token keyword">for</span> pp_file <span class="token keyword">in</span> <span class="token variable">${pp_files}</span> <span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">test</span> -f <span class="token variable">${ESPRESSO_PSEUDO}</span>/<span class="token variable">${pp_file}</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -n <span class="token string">"Downloading <span class="token variable">${pp_file}</span> to <span class="token variable">${ESPRESSO_PSEUDO}</span> ... "</span>    <span class="token variable">${DOWNLOADER}</span> <span class="token variable">${ESPRESSO_PSEUDO}</span>/<span class="token variable">${pp_file}</span> <span class="token variable">${NETWORK_PSEUDO}</span>/<span class="token variable">${pp_file}</span> 2<span class="token operator">></span> /dev/null    <span class="token keyword">if</span> <span class="token function">test</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Download of"</span> <span class="token variable">${pp_file}</span> <span class="token string">"FAILED, do it manually -- Testing aborted!"</span>        <span class="token keyword">exit</span> -1    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"done."</span>    <span class="token keyword">fi</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"No need to download <span class="token variable">${pp_file}</span>."</span><span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新打包后上传服务器开始编译。</p><h3 id="编译具体步骤"><a href="#编译具体步骤" class="headerlink" title="编译具体步骤"></a>编译具体步骤</h3><ol><li>将补丁文件backports-6.4.1.diff拷贝到QE主目录，进入QE主目录并执行如下命令为QE打补丁：<pre class="line-numbers language-bash"><code class="language-bash">patch -p1 --merge <span class="token operator">&lt;</span> backports-6.4.1.diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>利用QE的configure实现对编译器和数学库的自动配置，执行命令：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">./configure MPIF90<span class="token operator">=</span>mpiifort CC<span class="token operator">=</span>mpiicc F90<span class="token operator">=</span>ifort F77<span class="token operator">=</span>mpiifort -enable-parallel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改make.inc文件<pre class="line-numbers language-bash"><code class="language-bash">106 FFLAGS         <span class="token operator">=</span> -O3 -assume byterecl -g -traceback<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">132 BLAS_LIBS      <span class="token operator">=</span>   -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">141 LAPACK_LIBS    <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">144 SCALAPACK_LIBS <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">149 FFT_LIBS       <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">159 MPI_LIBS       <span class="token operator">=</span> -L/opt/intel/impi/2019.4.243/intel64/lib -lmpi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>编译</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j n all <span class="token comment" spellcheck="true">#n为并行编译时调用的核数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：并行编译时有时会遇到无法排除的错误，如果出现未知错误，建议使用单个核编译<br>5. 测试</p><pre class="line-numbers language-bash"><code class="language-bash">To run Quantum ESPRESSO test-suite, <span class="token function">type</span> at the shell prompt:  <span class="token function">make</span> targetwhere <span class="token operator">&lt;</span>target<span class="token operator">></span> identifies an action run-tests                   <span class="token keyword">:</span> run-tests-serial <span class="token punctuation">(</span>default<span class="token punctuation">)</span> run-tests-serial            <span class="token keyword">:</span> run all tests <span class="token keyword">in</span> SERIAL run-tests-XX-serial         <span class="token keyword">:</span> run tests <span class="token keyword">for</span> XX<span class="token operator">=</span><span class="token punctuation">{</span>pw,cp<span class="token punctuation">}</span> only, as above run-tests-parallel          <span class="token keyword">:</span> run all tests <span class="token keyword">in</span> PARALLEL <span class="token punctuation">(</span>4 MPI<span class="token punctuation">)</span> run-tests-XX-parallel       <span class="token keyword">:</span> run tests <span class="token keyword">for</span> XX<span class="token operator">=</span><span class="token punctuation">{</span>pw,cp<span class="token punctuation">}</span> only, as above run-custom-test testdir<span class="token operator">=</span>DIR <span class="token keyword">:</span> run <span class="token function">test</span> <span class="token keyword">in</span> DIR only <span class="token punctuation">(</span>serial<span class="token punctuation">)</span> run-custom-test-parallel testdir<span class="token operator">=</span>DIR <span class="token keyword">:</span> run <span class="token function">test</span> <span class="token keyword">in</span> DIR only <span class="token punctuation">(</span>parallel 4 MPI<span class="token punctuation">)</span> compare                     <span class="token keyword">:</span> compare last output with reference clean                       <span class="token keyword">:</span> clean stdout/sderr of all testsFor additional advanced commands and settings please manually inspectENVIRONMENT and Makefile files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果测试结果为全部通过，或个别结果的数值计算出现微小误差的情况则不影响对QE的使用。</p><h2 id="Electron-phonon-Wannier-（EPW-的编译"><a href="#Electron-phonon-Wannier-（EPW-的编译" class="headerlink" title="Electron-phonon Wannier （EPW)的编译"></a>Electron-phonon Wannier （EPW)的编译</h2><h3 id="EPW简介"><a href="#EPW简介" class="headerlink" title="EPW简介"></a>EPW简介</h3><p>&emsp;&emsp;EPW是Electron-phonon Wannier的缩写，主要用于计算与电声相互作用相关的物理性质，主要包括：</p><ol><li>The total electron-phonon coupling strenght $\lambda$</li><li>The anisotropic Eliashberg spectral function $\alpha^{2}F$</li><li>The transport spectral function $\alpha^{2}F_{\rm tr}$</li><li>The anisotropic superconducting gap  ${\Delta}_{n\rm k}$ within the Eliashberg theory</li><li>The electron and phonon self-energies arising from electron-phonon interaction</li><li>The phonon linewidths and lifetimes arising from electron-phonon interaction</li><li>The electron linewidths and lifetimes arising from electron-phonon interaction</li><li>The temperature-dependence of the carrier lifetimes</li><li>The spectral functions needed for the calculation of ARPES spectra</li><li>The electron and hole mobility $\mu$</li></ol><p>从EPW v4.1（26 April 2016）开始，EPW并入了Quantum-ESPRESSO软件，编译和计算都是基于QE基础上进行的，目前的最新版本是EPW v5.1。</p><h3 id="EPW学习资料"><a href="#EPW学习资料" class="headerlink" title="EPW学习资料"></a>EPW学习资料</h3><ol><li><a href="http://epw.org.uk/Documentation/Tutorial" target="_blank" rel="noopener">Tutorial</a></li><li><a href="http://epw.org.uk/Documentation/School2018" target="_blank" rel="noopener">School on Electron-Phonon Physics from First Principles</a></li><li><a href="https://www.youtube.com/playlist?list=PLGntAYRT8AVmQMyurFoncyOdHljqeGU_R" target="_blank" rel="noopener">Projects: Quantum Espresso Tutorial 2019</a></li><li><a href="https://www.youtube.com/channel/UCr3qjMlMoPVtgcdlJUMUJJQ" target="_blank" rel="noopener">Samuel Poncé</a></li></ol><h3 id="EPW编译"><a href="#EPW编译" class="headerlink" title="EPW编译"></a>EPW编译</h3><ol><li>下载<a href="http://www.wannier.org/" target="_blank" rel="noopener">Wannier90 (v3.0.0)</a>，并重命名为v3.0.0.tar.gz，然后拷贝到QE下的archive文件夹下。</li><li>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> epw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>测试<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> test-suite<span class="token function">make</span> run-tests-epw-parallel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>如果测试结果为全部通过，则可以使用EPW软件计算了。</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://blog.sciencenet.cn/blog-2909108-1152511.html" target="_blank" rel="noopener">QE使用经验总结：（一）编译</a></li><li><a href="https://www.youtube.com/playlist?list=PLGntAYRT8AVk9EV5Fm8qRboc3RCReTqGm" target="_blank" rel="noopener">Hands-on: Quantum Espresso Tutorial 2019</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Quantum ESPRESSO </category>
          
          <category> EPW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quantum ESPRESSO </tag>
            
            <tag> EPW </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
