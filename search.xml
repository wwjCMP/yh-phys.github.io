<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VASP计算能带和态密度</title>
      <link href="/2019/10/04/vasp-band-structure-dos/"/>
      <url>/2019/10/04/vasp-band-structure-dos/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;本文以二维InSe材料为例，详细介绍了二维材料的结构优化、静态自洽，能带计算和态密度计算的计算过程和注意事项。<br>&emsp;&emsp;为了对二维材料的晶格常数进行充分优化，且不对真空层厚度做优化，需要修改vasp安装包～/vasp.5.4.4/src/constr_cell_relax.F源文件，修改的具体说明可以参考清华大学刘锦程博士的<a href="http://blog.wangruixing.cn/2019/05/05/constr/" target="_blank" rel="noopener">博文</a>，编译时直接覆盖掉原文件即可，新的constr_cell_relax.F文件如下：</p><pre><code>!-----------------------------------------------------------------------!! At present, VASP does not allow to relax the cellshape selectively! i.e. for instance only cell relaxation in x direction.! To be more precisse, this behaviour can not be achived via the INCAR! or POSCAR file.! However, it is possible to set selected components of the stress tensor! to zero.! The most conveninent position to do this is the routines ! CONSTR_CELL_RELAX  (constraint cell relaxation).! FCELL contains the forces on the basis vectors.! These forces are used to modify the basis vectors according! to the following equations:!!      A_OLD(1:3,1:3)=A(1:3,1:3) ! F90 style !      DO J=1,3!      DO I=1,3!      DO K=1,3!        A(I,J)=A(I,J) + FCELL(I,K)*A_OLD(K,J)*STEP_SIZE!      ENDDO!      ENDDO!      ENDDO! where A holds the basis vectors (in cartesian coordinates).!!-----------------------------------------------------------------------      SUBROUTINE CONSTR_CELL_RELAX(FCELL)      USE prec      REAL(q) FCELL(3,3)!     just one simple example!     relaxation in x directions only!      SAVE=FCELL(1,1)!      FCELL=0   ! F90 style: set the whole array to zero!      FCELL(1,1)=SAVE!     relaxation in z direction only!      SAVE=FCELL(3,3)!      FCELL=0   ! F90 style: set the whole array to zero!      FCELL(3,3)=SAVE      LOGICAL FILFLG      INTEGER ICELL(3,3)      INQUIRE(FILE=&#39;OPTCELL&#39;,EXIST=FILFLG)      IF (FILFLG) THEN         OPEN(67,FILE=&#39;OPTCELL&#39;,FORM=&#39;FORMATTED&#39;,STATUS=&#39;OLD&#39;)         DO J=1,3            READ(67,&quot;(3I1)&quot;) (ICELL(I,J),I=1,3)         ENDDO         CLOSE(67)         DO J=1,3         DO I=1,3            IF (ICELL(I,J)==0) FCELL(I,J)=0.0         ENDDO         ENDDO      ENDIF      RETURN      END SUBROUTINE</code></pre><p>使用方法：在INCAR中设置ISIF = 3，同时在计算目录下新建OPTCELL文件，该文件为3$\times$3矩阵，在对称性满足的情况下可以对体系的9个自由度做弛豫。例如对于正交的二维材料，OPTCELL文件可写为：</p><pre><code>100  # 优化x方向010  # 优化y方向000  # 不优化z方向</code></pre><h2 id="结构优化"><a href="#结构优化" class="headerlink" title="结构优化"></a>结构优化</h2><h3 id="输入文件"><a href="#输入文件" class="headerlink" title="输入文件"></a>输入文件</h3><h4 id="INCAR"><a href="#INCAR" class="headerlink" title="INCAR"></a>INCAR</h4><pre><code>   SYSTEM = 2D_InSe   ISTART = 0   NWRITE = 2      PREC   = Accurate   ENCUT  = 500   GGA    = PE   NSW    = 200   ISIF   = 3   ISYM   = 2   NBLOCK = 1      KBLOCK = 1   IBRION = 2   NELM   = 80        EDIFF  = 1E-05   EDIFFG = -0.01    ALGO   = Normal   LDIAG  = .TRUE.   LREAL  = .FALSE.   ISMEAR = 0   SIGMA  = 0.02   ICHARG = 2   LPLANE = .TRUE.   NPAR   = 4   LSCALU = .FALSE.   NSIM   = 4   LWAVE  = .FALSE.   LCHARG = .FALSE.   ICORELEVEL =  1</code></pre><h4 id="POSCAR"><a href="#POSCAR" class="headerlink" title="POSCAR"></a>POSCAR</h4><pre><code>2D_InSe1.0        4.0836000443         0.0000000000         0.0000000000       -2.0418000221         3.5365013772         0.0000000000        0.0000000000         0.0000000000        25.3775005341   In   Se    2    2Direct     0.666670026         0.333330010         0.589979992     0.666670026         0.333330010         0.478789968     0.333329978         0.666669998         0.428439986     0.333329978         0.666669998         0.640340007</code></pre><h4 id="KPOINTS"><a href="#KPOINTS" class="headerlink" title="KPOINTS"></a>KPOINTS</h4><pre><code>Monkhorst Pack of Gamma centered0Gamma 13    13    1 0.0   0.0   0.0</code></pre><h4 id="POTCAR"><a href="#POTCAR" class="headerlink" title="POTCAR"></a>POTCAR</h4><pre><code>cat In_d/POTCAR Se/POTCAR &gt; POTCAR</code></pre><h4 id="OPTCELL"><a href="#OPTCELL" class="headerlink" title="OPTCELL"></a>OPTCELL</h4><pre><code>100110000</code></pre><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li>判断是否达到收敛精度<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"reached required accuracy"</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>reached required accuracy - stopping structural energy minimisation</code></pre></li><li>产看体系总能<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> TOTEN OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -n 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>free  energy   TOTEN  =       -14.21463638 eV</code></pre></li><li>对比优化前后晶格常数的变化</li></ul><p>—优化前—</p><pre><code>4.0836000443         0.0000000000         0.0000000000-2.0418000221         3.5365013772         0.00000000000.0000000000         0.0000000000        25.3775005341</code></pre><p>—优化后—</p><pre><code>4.0830388054550770    0.0000000000000000    0.0000000000000000-2.0415069539304227    3.5360297046777429    0.00000000000000000.0000000000000000    0.0000000000000000   25.3775005341000011</code></pre><p><font color="blue"> 分析：对比发现优化后a轴和b轴方向的晶格常数略微发生了变化，而c轴方向的真空层厚度并没有发生变化，说明使用固定基矢的方法是可以对二维材料做充分优化的 </font></p><ul><li>现使用只优化原子位置、不优化晶格常数（ISIF=2）的方法对二维InSe重新进行优化，对比体系总能变化情况</li></ul><p>—ISIF=3—</p><pre><code>free  energy   TOTEN  =       -14.21463638 eV</code></pre><p>—ISIF=2—</p><pre><code>free  energy   TOTEN  =       -14.21464001 eV</code></pre><p><font color="blue"> 分析：对比发现，两个总能几乎没有差别，说明对于初始结构比较好的体系来说，两种优化方式基本没有差别；但是对于初始结构不是很好的体系，这两种优化方法应该是有差别的，本人推荐使用固定基矢的方法充分优化二维材料晶格；另外，对于材料施加应变，且需要考虑泊松效应时，固定基矢优化是非常好的方式 </font></p><h2 id="截断能和k网格点收敛性测试"><a href="#截断能和k网格点收敛性测试" class="headerlink" title="截断能和k网格点收敛性测试"></a>截断能和k网格点收敛性测试</h2><p>&emsp;&emsp;在第一性原理计算过程中，截断能和k网格点的选取非常重要，选的太小容易造成体系没有达到最低能量状态，选的太大会耗费大量计算资源，尤其对于计算资源比较紧张的课题组，大量浪费计算资源会引起同学和导师的不满。在实际计算中对于截断能和k点选取的方法，一是参考已发表的论文值，这样有一定的说服力；二是需要自己去测试，一般保证体系总能变化范围在0.01~0.02 eV之间，就可认为截断能和k点达到了我们的计算要求。</p><h3 id="二维InSe的截断能测试"><a href="#二维InSe的截断能测试" class="headerlink" title="二维InSe的截断能测试"></a>二维InSe的截断能测试</h3><p>&emsp;&emsp;首先对二维InSe的截断能做测试，测试范围是400-900 eV，能量间隔为50 eV。</p><h4 id="输入文件-1"><a href="#输入文件-1" class="headerlink" title="输入文件"></a>输入文件</h4><p>&emsp;&emsp;在这一系列计算中，只需对INCAR文件做修改，其他文件无需修改；且计算完成后自动将体系总能随截断能的变化写入toten_vs_encut.dat文件，只需画图即可。实现方法是将INCAR以及一系列操作命令写入提交任务的脚本文件中。计算文件夹中包括：</p><pre><code>KPOINTS POSCAR OPTCELL POTCAR vasp5.4.4.job</code></pre><p>—vasp5.4.4.job—</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#PBS -N 2D_InSe</span><span class="token comment" spellcheck="true">#PBS -l nodes=1:ppn=16</span><span class="token comment" spellcheck="true">#PBS -m abe</span><span class="token comment" spellcheck="true">#PBS -j n</span><span class="token comment" spellcheck="true">##PBS -o job.log</span><span class="token comment" spellcheck="true">##PBS -e job.err</span><span class="token comment" spellcheck="true">#PBS -l walltime=250:00:00</span><span class="token function">cd</span> <span class="token variable">$PBS_O_WORKDIR</span><span class="token function">touch</span> toten_vs_encut.dat<span class="token keyword">for</span> ENCUT <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 400 50 800<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token comment" spellcheck="true"># generate INCAR</span><span class="token function">cat</span> <span class="token operator">></span> INCAR <span class="token operator">&lt;&lt;</span> <span class="token string">EOFSYSTEM = 2D_InSeISTART = 0NWRITE = 2   PREC   = AccurateENCUT  = <span class="token variable">$ENCUT</span>GGA    = PE NSW    = 200ISIF   = 3ISYM   = 2NBLOCK = 1   KBLOCK = 1IBRION = 2NELM   = 80   EDIFF  = 1E-05EDIFFG = -0.01 ALGO   = NormalLDIAG  = .TRUE.LREAL  = .FALSE.ISMEAR = 0SIGMA  = 0.02ICHARG = 2LPLANE = .TRUE.NPAR   = 4LSCALU = .FALSE.NSIM   = 4LWAVE  = .FALSE.LCHARG = .FALSE.ICORELEVEL =  1EOF</span><span class="token function">date</span> <span class="token string">"+01 Today's date is: %D. The time execution %T"</span> <span class="token operator">>></span> time.infompirun -np 16 /your direction/vasp.5.4.4/bin/vasp_std  <span class="token operator">></span> log<span class="token function">date</span> <span class="token string">"+02 Today's date is: %D. The time finish %T"</span> <span class="token operator">>></span> time.info<span class="token keyword">echo</span> -e <span class="token string">"<span class="token variable">$ENCUT</span> \c"</span> <span class="token operator">>></span> toten_vs_encut.dat<span class="token function">grep</span> TOTEN OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -n 1 <span class="token operator">|</span> \      <span class="token function">awk</span> <span class="token string">'/TOTEN/{print <span class="token variable"><span class="token variable">$(</span>NF-1<span class="token variable">)</span></span>}'</span> <span class="token operator">>></span> toten_vs_encut.dat<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算结果"><a href="#计算结果" class="headerlink" title="计算结果"></a>计算结果</h4><p>—toten_vs_encut.dat—</p><pre><code>400 -14.21435689450 -14.21513620500 -14.21463059550 -14.21432926600 -14.21451881650 -14.21462419700 -14.21461680750 -14.21457254800 -14.21462319</code></pre><p><img src="/image/encut.png" alt="encut"><br>—encut.gnu—</p><pre><code>set term post eps color enh solid datafile=&#39;toten_vs_encut.dat&#39;set output &#39;encut.eps&#39;set title &#39;toten\_vs\_encut&#39; font &#39;Times_New_Roman,24&#39;set xlabel &#39;encut&#39; font &#39;Times_New_Roman,18&#39;set ylabel &#39;TOTEN&#39; font &#39;Times_New_Roman,18&#39;plot datafile  with linespoints lt 7 lw 4 pt 9 pointsize 2set output</code></pre><h3 id="二维InSe的k点测试"><a href="#二维InSe的k点测试" class="headerlink" title="二维InSe的k点测试"></a>二维InSe的k点测试</h3><h4 id="输入文件-2"><a href="#输入文件-2" class="headerlink" title="输入文件"></a>输入文件</h4><p>&emsp;&emsp;在这一系列计算中，只需对KPOINTS文件做修改，其他文件无需修改；且计算完成后自动将体系总能随k点的变化写入toten_vs_kpoints.dat文件，只需画图即可。实现方法是将kpoints以及一系列操作命令写入提交任务的脚本文件中。计算文件夹中包括：</p><pre><code>INCAR POSCAR OPTCELL POTCAR vasp5.4.4.job</code></pre><p>—vasp5.4.4.job—</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#PBS -N 2D_InSe</span><span class="token comment" spellcheck="true">#PBS -l nodes=1:ppn=16</span><span class="token comment" spellcheck="true">#PBS -m abe</span><span class="token comment" spellcheck="true">#PBS -j n</span><span class="token comment" spellcheck="true">##PBS -o job.log</span><span class="token comment" spellcheck="true">##PBS -e job.err</span><span class="token comment" spellcheck="true">#PBS -l walltime=250:00:00</span><span class="token function">cd</span> <span class="token variable">$PBS_O_WORKDIR</span><span class="token function">touch</span> toten_vs_kpoints.dat<span class="token keyword">for</span> KPOINTS <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 5 2 29<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token comment" spellcheck="true"># generate KPOINTS</span><span class="token function">cat</span> <span class="token operator">></span> KPOINTS <span class="token operator">&lt;&lt;</span> <span class="token string">EOFMonkhorst Pack of Gamma centered0Gamma <span class="token variable">$KPOINTS</span>    <span class="token variable">$KPOINTS</span>    1 0.0   0.0   0.0EOF</span><span class="token function">date</span> <span class="token string">"+01 Today's date is: %D. The time execution %T"</span> <span class="token operator">>></span> time.infompirun -np 16 /your direction/vasp.5.4.4/bin/vasp_std  <span class="token operator">></span> log<span class="token function">date</span> <span class="token string">"+02 Today's date is: %D. The time finish %T"</span> <span class="token operator">>></span> time.info<span class="token keyword">echo</span> -e <span class="token string">"<span class="token variable">$KPOINTS</span> \c"</span> <span class="token operator">>></span> toten_vs_kpoints.dat<span class="token function">grep</span> TOTEN OUTCAR <span class="token operator">|</span> <span class="token function">tail</span> -n 1 <span class="token operator">|</span> \      <span class="token function">awk</span> <span class="token string">'/TOTEN/{print <span class="token variable"><span class="token variable">$(</span>NF-1<span class="token variable">)</span></span>}'</span> <span class="token operator">>></span> toten_vs_kpoints.dat<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算结果-1"><a href="#计算结果-1" class="headerlink" title="计算结果"></a>计算结果</h4><p>—toten_vs_kpoints.dat—</p><pre><code>5 -14.196027737 -14.212665569 -14.2143946211 -14.2146125713 -14.2146363815 -14.2146440517 -14.2146483119 -14.2146482121 -14.2146474123 -14.2146505325 -14.2146475227 -14.2146472029 -14.21464820</code></pre><p><img src="/image/kpoints.png" alt="kpoints"><br>—kpoints.gnu—</p><pre><code>set term post eps color enh solid datafile=&#39;toten_vs_kpoints.dat&#39;set output &#39;kpoints.eps&#39;set title &#39;toten\_vs\_kpoints&#39; font &#39;Times_New_Roman,24&#39;set xlabel &#39;kpoints&#39; font &#39;Times_New_Roman,18&#39;set ylabel &#39;TOTEN&#39; font &#39;Times_New_Roman,18&#39;plot datafile  with linespoints lt 7 lw 4 pt 9 pointsize 2set output</code></pre><h3 id="整体分析"><a href="#整体分析" class="headerlink" title="整体分析"></a>整体分析</h3><p>&emsp;&emsp;整体分析发现，对于二维InSe的截断能和k点取值分别为500 eV和13$\times$13$\times$1已经足够精确;与<a href="https://pubs.rsc.org/en/content/articlelanding/2018/NR/C8NR03172J#!divAbstract" target="_blank" rel="noopener">Meng Wu</a>等人报道的计算细节基本一致，说明测试是合理的。</p><h2 id="静态自洽"><a href="#静态自洽" class="headerlink" title="静态自洽"></a>静态自洽</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;VASP做静态自洽的目的主要是为了得到好的电子密度和波函数文件，为了使后续的性质计算可以读取电子密度和波函数，进而增加收敛速度。</p><h3 id="输入文件-3"><a href="#输入文件-3" class="headerlink" title="输入文件"></a>输入文件</h3><p>—INCAR—</p><pre><code>SYSTEM = 2D_InSeISTART = 0NWRITE = 2   PREC   = AccurateENCUT  = 500GGA    = PE NSW    = 0ISIF   = 2ISYM   = 2NBLOCK = 1   KBLOCK = 1IBRION = -1 NELM   = 80   EDIFF  = 1E-05EDIFFG = -0.01 ALGO   = NormalLDIAG  = .TRUE.LREAL  = .FALSE.ISMEAR = 0SIGMA  = 0.02ICHARG = 2LPLANE = .TRUE.NPAR   = 4LSCALU = .FALSE.NSIM   = 4LWAVE  = .TRUE.LCHARG = .TRUE.ICORELEVEL =  1</code></pre><p>—POSCAR—<br>将优化完后的CONTCAR直接拷贝为POSCAR即可<br>—POTCAR—<br>与优化时的POTCAR文件相同<br>—KPOINTS—<br>自洽计算要求有密的k网格点，在计算条件允许的情况下要求自洽的k网格点大致为优化时的2倍左右。</p><pre><code>Monkhorst Pack of Gamma centered0Gamma 25    25    1 0.0   0.0   0.0</code></pre><h2 id="态密度"><a href="#态密度" class="headerlink" title="态密度"></a>态密度</h2><h3 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;态密度是固体物理中一个非常重要的概念，在实验上可利用X射线发射光谱方法测定，在理论上可使用第一性原理计算软件计算得出；可以用于分析材料材料能隙特性、体系成键的特性、体系的自旋极化、相邻原子之间的作用强弱、电子比热和顺磁磁化率等性质。</p><h3 id="输入文件-4"><a href="#输入文件-4" class="headerlink" title="输入文件"></a>输入文件</h3><p>—INCAR—</p><pre><code>SYSTEM = 2D_InSeISTART = 1NWRITE = 2PREC   = AccurateENCUT  = 500GGA    = PENSW    = 0ISIF   = 2ISYM   = 2NBLOCK = 1KBLOCK = 1IBRION = -1NELM   = 80EDIFF  = 1E-05EDIFFG = -0.01ALGO   = NormalLDIAG  = .TRUE.LREAL  = .FALSE.ISMEAR = -5SIGMA  = 0.02ICHARG = 11LPLANE = .TRUE.NPAR   = 4LSCALU = .FALSE.NSIM   = 4LWAVE  = .FALSE.LCHARG = .FALSE.ICORELEVEL =  1LORBIT = 11  # output PDOS</code></pre><p>—KPOINTS—<br>DOS计算要求非常密集的k网格点，至少要求与自洽时k网格点相同，或可适当增加。</p><pre><code>Monkhorst Pack of Gamma centered0Gamma 29    29    1 0.0   0.0   0.0</code></pre><p>POSCAR、POTCAR文件与自洽时相同；并保证在计算目录下有自洽时产生的CHGCAR和WAVECAR文件，以供读取。</p><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><h4 id="总的态密度"><a href="#总的态密度" class="headerlink" title="总的态密度"></a>总的态密度</h4><p><img src="/image/TDOS.png" alt="TDOS"></p><h4 id="局域态密度"><a href="#局域态密度" class="headerlink" title="局域态密度"></a>局域态密度</h4><p><img src="/image/LDOS.png" alt="LDOS"></p><h4 id="Se的分波态密度"><a href="#Se的分波态密度" class="headerlink" title="Se的分波态密度"></a>Se的分波态密度</h4><p><img src="/image/Se_PDOS.png" alt="Se_PDOS"></p><h4 id="In的分波态密度"><a href="#In的分波态密度" class="headerlink" title="In的分波态密度"></a>In的分波态密度</h4><p><img src="/image/In_PDOS.png" alt="In_PDOS"></p><h2 id="能带"><a href="#能带" class="headerlink" title="能带"></a>能带</h2><h3 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;能带理论是研究材料性质的重要方法，现利用VASP软件计算二维InSe的能带。</p><h3 id="输入文件-5"><a href="#输入文件-5" class="headerlink" title="输入文件"></a>输入文件</h3><p>—INCAR—</p><pre><code>SYSTEM = 2D_InSeISTART = 1NWRITE = 2PREC   = AccurateENCUT  = 500GGA    = PENSW    = 0ISIF   = 2ISYM   = 2NBLOCK = 1KBLOCK = 1IBRION = -1NELM   = 80EDIFF  = 1E-05EDIFFG = -0.01ALGO   = NormalLDIAG  = .TRUE.LREAL  = .FALSE.ISMEAR = 0SIGMA  = 0.02ICHARG = 11LPLANE = .TRUE.NPAR   = 4LSCALU = .FALSE.NSIM   = 4LWAVE  = .FALSE.LCHARG = .FALSE.ICORELEVEL =  1LORBIT = 11</code></pre><p>—KPOINTS—</p><pre class="line-numbers language-bash"><code class="language-bash">k-points along high symmetry lines  100Line-modeRec   0.3333333  0.3333333 0       <span class="token operator">!</span>K   0          0         0       <span class="token operator">!</span>GAMMA   0          0         0       <span class="token operator">!</span>GAMMA   0.5        0         0       <span class="token operator">!</span>M   0.5        0         0       <span class="token operator">!</span>M   0.3333333  0.3333333 0       <span class="token operator">!</span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POSCAR、POTCAR文件与自洽时相同；并保证在计算目录下有自洽时产生的CHGCAR和WAVECAR文件，以供读取。</p><h3 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h3><p>二维InSe能带<br><img src="/image/band.png" alt="band.png"><br>漂亮的二维InSe能带<br><img src="/image/new_band.png" alt="band.png"><br>二维InSe按原子投影的能带图<br><img src="/image/PBAND.png" alt="PBAND.png"><br>二维InSe按原子的$s$、$p$、$d$轨道投影的能带图<br>In原子<br><img src="/image/PBANDInspd.png" alt="PBANDInspd.png"><br>Se原子<br><img src="/image/PBANDSespd.png" alt="PBANDSespd.png"><br>InSe<br><img src="/image/PBNDSeInspd.png" alt="PBNDSeInspd.png"><br>二维InSe按原子的$s$、$p_x$、$p_y$、$p_z$轨道投影的能带图<br>In原子<br><img src="/image/PBANDInspxpypz.png" alt="PBANDInspxpypz.png"><br>Se原子<br><img src="/image/PBANDSespxpypz.png" alt="PBANDSespxpypz.png"></p><p><font color="blue"> Note：通过做投影能带图，与分波态密度做对比发现，对于带边位置的贡献是一致的 </font></p>]]></content>
      
      
      <categories>
          
          <category> vasp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
            <tag> band structure </tag>
            
            <tag> density of states </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vasp_kpoints文件设置详解</title>
      <link href="/2019/09/27/vasp-kpoints/"/>
      <url>/2019/09/27/vasp-kpoints/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;kpoints文件是vasp计算过程中必不可少的输入文件，虽然从vasp.5.2.2版本后可以在INCAR中设置简单的KPOINTS信息，但是不推荐在INCAR中直接设置，原因是INCAR中无法设置复杂的KPOINTS信息。合理的kpoints设置不仅可以增加计算效率，而且可以得到合理的计算结果，下面对kpoints的一般格式和设置方法做一个简单的介绍，并且给出自身计算过程中的经验总结。</p><h2 id="kpoints文件简述"><a href="#kpoints文件简述" class="headerlink" title="kpoints文件简述"></a>kpoints文件简述</h2><p>&emsp;&emsp;kpoints文件可以分为两个大类，一是vasp程序自动分割产生k点，二是通过手动输入指定k点信息。在实际计算过程中，除能带计算时手动指定k点信息外，其他计算一律推荐使用自动产生k点方法。</p><h2 id="自动产生k点的kpoints文件设置"><a href="#自动产生k点的kpoints文件设置" class="headerlink" title="自动产生k点的kpoints文件设置"></a>自动产生k点的kpoints文件设置</h2><p>&emsp;&emsp;自动产生k点主要用于结构优化、自洽计算、DOS计算、光学性质计算等，基本格式如下：<br>情形一：</p><pre class="line-numbers language-bash"><code class="language-bash">Automatic k-mesh generation0Gamma4    4    4 0.0  0.0  0.0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="blue">说明：<br>line 1：注释行，没有实际意义，但是不能没有<br>line 2：表示自动生成k点网格<br>line 3：第三行可用的选项有Gamma（vasp程序只识别首字母，即G或g都可，下同），表示按M-P方法以Γ点为中心自动产生k点；选项Monkhorst-pack表示按原始Monkhorst-Pack方法产生k点网格。<br>line 4：确定沿倒格子各方向（x，y，z）上K网格点的数目<br>line 5：对所按网格分割产生的k点进行平移的量，此处不平移。 </font><br>情形二：</p><pre class="line-numbers language-bash"><code class="language-bash">Automatic mesh0Auto10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><font color="blue">说明：<br>line 1：注释行，没有实际意义，但是不能没有<br>line 2：表示自动生成k点网格<br>line 3：表示完全自动产生k点<br>line 4：表示a linear k-point density of 10 $\overset{\circ}{A}$，其含义为每1/$\overset{\circ}{A}$上的k点数 </font></p><h2 id="手动指定k点的kpoints文件设置"><a href="#手动指定k点的kpoints文件设置" class="headerlink" title="手动指定k点的kpoints文件设置"></a>手动指定k点的kpoints文件设置</h2><p>&emsp;&emsp;手动指定k点的情形主要用于能带计算，一般格式为：</p><pre class="line-numbers language-bash"><code class="language-bash">k-points along high symmetry lines <span class="token keyword">for</span> hexagonal structure 40Line-modeRec0.000    0.000    0.500  <span class="token operator">!</span> A0.000    0.000    0.000  <span class="token operator">!</span> Gamma0.000    0.000    0.000  <span class="token operator">!</span> Gamma 0.500    0.000    0.000  <span class="token operator">!</span> M0.500    0.000    0.000  <span class="token operator">!</span> M0.333333 0.333333 0.000  <span class="token operator">!</span> K 0.333333 0.333333 0.000  <span class="token operator">!</span> K0.000    0.000    0.000  <span class="token operator">!</span> Gamma<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="blue">说明：<br>line 1：注释行，没有实际意义，但是不能没有<br>line 2：每对高对称点之间产生40个k点<br>line 3：以字母L开头表示按line模式产生k点<br>line 4：以字母R开头表示k点按倒格子坐标系<br>line 5-~~：每对高对称点的坐标，此处的路径为A-G-M-K-G </font></p><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ul><li>结构优化时，k点数目与晶格常数的乘积大约达到40-45之间就够用了。</li><li>自洽计算时k点数目数目大致为结构优化时的2倍。</li><li>DOS计算、光学性质计算时可在自洽的k点基础上适当增大，至少达到自洽计算时k点数目。</li><li>对于六方晶系，强烈推荐使用Gamma方法，对于大部分体系都推荐使用此方法。</li><li>能带计算时高对称点查找可依据如下方法：<br>(1) 通过seek-path工具寻找高对称点，具体用法<a href="https://www.materialscloud.org/work/tools/seekpath" target="_blank" rel="noopener">$这里$</a>。<br>(2) 依据文献<a href="https://doi.org/10.1016/j.commatsci.2010.05.010" target="_blank" rel="noopener">High-throughput electronic band structure calculations: Challenges and tools</a>选取。</li></ul>]]></content>
      
      
      <categories>
          
          <category> vasp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vasp </tag>
            
            <tag> kpoints </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phono3py软件的编译方法</title>
      <link href="/2019/09/25/phono3py-install/"/>
      <url>/2019/09/25/phono3py-install/</url>
      
        <content type="html"><![CDATA[<p>编译环境：Ubuntu18.04.3 LTS<br>phono3py版本：phono3py–1.17.0.post1<br>phonopy版本：phonopy–2.2.0<br>python版本：python–3.6.8</p><h2 id="phono3py概述"><a href="#phono3py概述" class="headerlink" title="phono3py概述"></a><a href="https://atztogo.github.io/phono3py/index.html" target="_blank" rel="noopener">phono3py</a>概述</h2><p>&emsp;&emsp;phono3py是基于超原胞方法计算声子-声子相互作用以及与其相关性质的软件包，可以计算的性质主要包括：</p><ul><li>Lattice thermal conductivity (RTA and <a href="https://atztogo.github.io/phono3py/direct-solution.html#direct-solution" target="_blank" rel="noopener">direct solution of LBTE</a>)</li><li>Phonon lifetime/linewidth</li><li>Imaginary part of self energy</li><li>Joint density of states (JDOS) and weighted-JDOS<br>&emsp;&emsp;phono3py可以与常见的第一性原理计算软件结合使用，例如：<br><a href="https://atztogo.github.io/phono3py/vasp.html#vasp-interface" target="_blank" rel="noopener">VASP</a>, <a href="https://atztogo.github.io/phono3py/pwscf.html#pwscf-interface" target="_blank" rel="noopener">QE</a>, <a href="https://atztogo.github.io/phono3py/crystal.html#crystal-interface" target="_blank" rel="noopener">CRYSTAL</a>, <a href="https://atztogo.github.io/phono3py/turbomole.html#turbomole-interface" target="_blank" rel="noopener">TURBOMOLE</a>等，具体内容可参考<a href="https://atztogo.github.io/phono3py/interfaces.html#calculator-interfaces" target="_blank" rel="noopener">官网说明</a>。<h2 id="phono3py编译方法介绍"><a href="#phono3py编译方法介绍" class="headerlink" title="phono3py编译方法介绍"></a>phono3py编译方法介绍</h2>&emsp;&emsp;对于phono3py的编译是花了许多精力在里边的，尤其是对于新手而言，可能碰到许多奇怪的错误，在<a href="https://www.google.com.hk/" target="_blank" rel="noopener">Google</a>上也没有搜到合适的解决办法，为了新手方便编译，特将编译过程写出来，以供参考。<br>&emsp;&emsp;phono3py的编译主要有3种方法：</li><li>使用conda利用如下命令自动安装：<pre class="line-numbers language-bash"><code class="language-bash">conda <span class="token function">install</span> -c atztogo phono3py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>但是安装完成后phono3py无法使用，会报一些奇怪的错误。</li><li>使用pip利用如下命令自动安装：<pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> phono3py --user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>同样，安装完成后phono3py无法使用，会报一些奇怪的错误。</li><li>基于源码编译安装<h2 id="phono3py源码编译方法"><a href="#phono3py源码编译方法" class="headerlink" title="phono3py源码编译方法"></a>phono3py源码编译方法</h2>说明：由于phono3py的运行依赖于phonopy，因此经过测试后发现，phono3py–1.17.0.post1版本可以与phonopy–2.2.0或phonopy–2.1.4版本兼容，phonopy–2.1.4以前的版本没有测试。但是与phonopy–2.3.0以及phonopy–2.3.0.post5版本不兼容，会报错。</li><li>安装编译环境：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-numpy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-scipy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-h5py<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-scipy<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-matplotlib<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-yaml<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libopenblas-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgomp1<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblapack-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> liblapacke-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-distutils<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>phonopy-2.2.0的下载与编译：<br><a href="https://pypi.org/project/phonopy/2.2.0/#files" target="_blank" rel="noopener">下载</a><br>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf phono3py-1.17.0.post1.tar.gz<span class="token function">cd</span> phono3py-1.17.0.post1.tar.gzpython3.6 setup.py <span class="token function">install</span> --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>phono3py的下载与编译：<br><a href="https://pypi.org/project/phono3py/#files" target="_blank" rel="noopener">下载</a><br>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> zxvf phono3py-1.17.0.post1.tar.gz<span class="token function">cd</span> phono3py-1.17.0.post1.tar.gzpython3.6 setup.py <span class="token function">install</span> --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>设置环境变量：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.bashrc<span class="token function">export</span> PYTHONPATH<span class="token operator">=</span>~/.local/lib/python3.6/site-packages:<span class="token variable">$PYTHONPATH</span><span class="token function">export</span> PATH<span class="token operator">=</span>~/.local/bin:<span class="token variable">$PATH</span><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>测试结果：<br><img src="/image/phonopy.png" alt="phonopy测试结果"></li></ul><p><img src="/image/phono3py.png" alt="phono3py测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> phono3py </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phono3py </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建根号界面晶体模型</title>
      <link href="/2019/09/25/materials-studio-build/"/>
      <url>/2019/09/25/materials-studio-build/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Materials Studio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Materials Studio </tag>
            
            <tag> 根号表面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QE和EPW软件的编译</title>
      <link href="/2019/09/25/quantum-espresso-compile/"/>
      <url>/2019/09/25/quantum-espresso-compile/</url>
      
        <content type="html"><![CDATA[<p>编译环境：Ubuntu18.04.2<br>Intel编译器：parallel_studio_xe_2019_update4</p><h2 id="Intel编译器的安装与配置"><a href="#Intel编译器的安装与配置" class="headerlink" title="Intel编译器的安装与配置"></a>Intel编译器的安装与配置</h2><h3 id="Intel编译器的申请"><a href="#Intel编译器的申请" class="headerlink" title="Intel编译器的申请"></a>Intel编译器的申请</h3><p>&emsp;&emsp;使用学校邮箱在<a href="https://software.intel.com/en-us/qualify-for-free-software/student#" target="_blank" rel="noopener">Intel官网</a>可免费申请Intel编译器，使用时间为一年，到期后可重复申请，然后将新申请的license复制到安装路径文件夹license中即可。</p><pre class="line-numbers language-bash"><code class="language-bash">/opt/intel/license<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /opt/intel/bin/compilervars.sh intel64<span class="token function">source</span> /opt/intel/mkl/bin/mklvars.sh intel64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：普通用户配置环境变量需要依据自己的安装路径修改</p><h2 id="二、QE的下载编译"><a href="#二、QE的下载编译" class="headerlink" title="二、QE的下载编译"></a>二、QE的下载编译</h2><h3 id="QE下载"><a href="#QE下载" class="headerlink" title="QE下载"></a>QE下载</h3><p>&emsp;&emsp;在<a href="https://github.com/QEF/q-e/releases">QE官网</a>下载最新版q-e-qe-6.4.1.tar以及补丁文件backports-6.4.1.diff。</p><h3 id="赝势库的下载"><a href="#赝势库的下载" class="headerlink" title="赝势库的下载"></a>赝势库的下载</h3><p>&emsp;&emsp;一般情况下，为了计算结果的可靠性，在编译完软件时需要测试自带的算例，此时需要联网下载赝势库。考虑到大部分集群无法联网，需要借助于安装了Linux系统的主机下载赝势库。进入test-suite子目录，修改check_pseudo.sh文件，取消部分echo命令前的注释#号，以便及时查看下载进度，修改后的check_pseudo.sh文件如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Copyright (C) 2001-2016 Quantum ESPRESSO group</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># This program is free software; you can redistribute it and/or</span><span class="token comment" spellcheck="true"># modify it under the terms of the GNU General Public License</span><span class="token comment" spellcheck="true"># as published by the Free Software Foundation; either version 2</span><span class="token comment" spellcheck="true"># of the License. See the file `License' in the root directory</span><span class="token comment" spellcheck="true"># of the present distribution.</span><span class="token function">source</span> <span class="token variable">${ESPRESSO_ROOT}</span>/test-suite/ENVIRONMENT<span class="token keyword">if</span> <span class="token function">test</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">which</span> curl<span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token keyword">if</span> <span class="token function">test</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">wget</span><span class="token variable">`</span></span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>      <span class="token keyword">echo</span> <span class="token string">"### wget or curl not found: will not be able to download missing PP ###"</span>   <span class="token keyword">else</span>      DOWNLOADER<span class="token operator">=</span><span class="token string">"wget -O"</span>       <span class="token keyword">echo</span> <span class="token string">"wget found"</span>   <span class="token keyword">fi</span><span class="token keyword">else</span>   DOWNLOADER<span class="token operator">=</span><span class="token string">"curl -o"</span>    <span class="token keyword">echo</span> <span class="token string">"curl found"</span><span class="token keyword">fi</span>inputs<span class="token operator">=</span>`find <span class="token variable">$1*</span> -type f -name <span class="token string">"*.in"</span> -not -name <span class="token string">"test.*"</span> -not -name <span class="token string">"benchmark.*"</span><span class="token variable"><span class="token variable">`</span>pp_files<span class="token operator">=</span><span class="token variable">`</span></span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable">${inputs}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">grep</span> UPF <span class="token variable">${x}</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span><span class="token punctuation">;</span> done`<span class="token keyword">for</span> pp_file <span class="token keyword">in</span> <span class="token variable">${pp_files}</span> <span class="token punctuation">;</span> <span class="token keyword">do</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">test</span> -f <span class="token variable">${ESPRESSO_PSEUDO}</span>/<span class="token variable">${pp_file}</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> -n <span class="token string">"Downloading <span class="token variable">${pp_file}</span> to <span class="token variable">${ESPRESSO_PSEUDO}</span> ... "</span>    <span class="token variable">${DOWNLOADER}</span> <span class="token variable">${ESPRESSO_PSEUDO}</span>/<span class="token variable">${pp_file}</span> <span class="token variable">${NETWORK_PSEUDO}</span>/<span class="token variable">${pp_file}</span> 2<span class="token operator">></span> /dev/null    <span class="token keyword">if</span> <span class="token function">test</span> <span class="token variable">$?</span> <span class="token operator">!=</span> 0 <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"Download of"</span> <span class="token variable">${pp_file}</span> <span class="token string">"FAILED, do it manually -- Testing aborted!"</span>        <span class="token keyword">exit</span> -1    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"done."</span>    <span class="token keyword">fi</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"No need to download <span class="token variable">${pp_file}</span>."</span><span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新打包后上传服务器开始编译。</p><h3 id="编译具体步骤"><a href="#编译具体步骤" class="headerlink" title="编译具体步骤"></a>编译具体步骤</h3><ol><li>将补丁文件backports-6.4.1.diff拷贝到QE主目录，进入QE主目录并执行如下命令为QE打补丁：<pre class="line-numbers language-bash"><code class="language-bash">patch -p1 --merge <span class="token operator">&lt;</span> backports-6.4.1.diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>利用QE的configure实现对编译器和数学库的自动配置，执行命令：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">./configure MPIF90<span class="token operator">=</span>mpiifort CC<span class="token operator">=</span>mpiicc F90<span class="token operator">=</span>ifort F77<span class="token operator">=</span>mpiifort -enable-parallel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改make.inc文件<pre class="line-numbers language-bash"><code class="language-bash">106 FFLAGS         <span class="token operator">=</span> -O3 -assume byterecl -g -traceback<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">132 BLAS_LIBS      <span class="token operator">=</span>   -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">141 LAPACK_LIBS    <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">144 SCALAPACK_LIBS <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">149 FFT_LIBS       <span class="token operator">=</span> -L<span class="token variable">${MKLROOT}</span>/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread -lm -ldl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">159 MPI_LIBS       <span class="token operator">=</span> -L/opt/intel/impi/2019.4.243/intel64/lib -lmpi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>编译</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> -j n all <span class="token comment" spellcheck="true">#n为并行编译时调用的核数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：并行编译时有时会遇到无法排除的错误，如果出现未知错误，建议使用单个核编译<br>5. 测试</p><pre class="line-numbers language-bash"><code class="language-bash">To run Quantum ESPRESSO test-suite, <span class="token function">type</span> at the shell prompt:  <span class="token function">make</span> targetwhere <span class="token operator">&lt;</span>target<span class="token operator">></span> identifies an action run-tests                   <span class="token keyword">:</span> run-tests-serial <span class="token punctuation">(</span>default<span class="token punctuation">)</span> run-tests-serial            <span class="token keyword">:</span> run all tests <span class="token keyword">in</span> SERIAL run-tests-XX-serial         <span class="token keyword">:</span> run tests <span class="token keyword">for</span> XX<span class="token operator">=</span><span class="token punctuation">{</span>pw,cp<span class="token punctuation">}</span> only, as above run-tests-parallel          <span class="token keyword">:</span> run all tests <span class="token keyword">in</span> PARALLEL <span class="token punctuation">(</span>4 MPI<span class="token punctuation">)</span> run-tests-XX-parallel       <span class="token keyword">:</span> run tests <span class="token keyword">for</span> XX<span class="token operator">=</span><span class="token punctuation">{</span>pw,cp<span class="token punctuation">}</span> only, as above run-custom-test testdir<span class="token operator">=</span>DIR <span class="token keyword">:</span> run <span class="token function">test</span> <span class="token keyword">in</span> DIR only <span class="token punctuation">(</span>serial<span class="token punctuation">)</span> run-custom-test-parallel testdir<span class="token operator">=</span>DIR <span class="token keyword">:</span> run <span class="token function">test</span> <span class="token keyword">in</span> DIR only <span class="token punctuation">(</span>parallel 4 MPI<span class="token punctuation">)</span> compare                     <span class="token keyword">:</span> compare last output with reference clean                       <span class="token keyword">:</span> clean stdout/sderr of all testsFor additional advanced commands and settings please manually inspectENVIRONMENT and Makefile files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果测试结果为全部通过，或个别结果的数值计算出现微小误差的情况则不影响对QE的使用。</p><h2 id="Electron-phonon-Wannier-（EPW-的编译"><a href="#Electron-phonon-Wannier-（EPW-的编译" class="headerlink" title="Electron-phonon Wannier （EPW)的编译"></a>Electron-phonon Wannier （EPW)的编译</h2><h3 id="EPW简介"><a href="#EPW简介" class="headerlink" title="EPW简介"></a>EPW简介</h3><p>&emsp;&emsp;EPW是Electron-phonon Wannier的缩写，主要用于计算与电声相互作用相关的物理性质，主要包括：</p><ol><li>The total electron-phonon coupling strenght $\lambda$</li><li>The anisotropic Eliashberg spectral function $\alpha^{2}F$</li><li>The transport spectral function $\alpha^{2}F_{\rm tr}$</li><li>The anisotropic superconducting gap  ${\Delta}_{n\rm k}$ within the Eliashberg theory</li><li>The electron and phonon self-energies arising from electron-phonon interaction</li><li>The phonon linewidths and lifetimes arising from electron-phonon interaction</li><li>The electron linewidths and lifetimes arising from electron-phonon interaction</li><li>The temperature-dependence of the carrier lifetimes</li><li>The spectral functions needed for the calculation of ARPES spectra</li><li>The electron and hole mobility $\mu$</li></ol><p>从EPW v4.1（26 April 2016）开始，EPW并入了Quantum-ESPRESSO软件，编译和计算都是基于QE基础上进行的，目前的最新版本是EPW v5.1。</p><h3 id="EPW学习资料"><a href="#EPW学习资料" class="headerlink" title="EPW学习资料"></a>EPW学习资料</h3><ol><li><a href="http://epw.org.uk/Documentation/Tutorial" target="_blank" rel="noopener">Tutorial</a></li><li><a href="http://epw.org.uk/Documentation/School2018" target="_blank" rel="noopener">School on Electron-Phonon Physics from First Principles</a></li><li><a href="https://www.youtube.com/playlist?list=PLGntAYRT8AVmQMyurFoncyOdHljqeGU_R" target="_blank" rel="noopener">Projects: Quantum Espresso Tutorial 2019</a></li><li><a href="https://www.youtube.com/channel/UCr3qjMlMoPVtgcdlJUMUJJQ" target="_blank" rel="noopener">Samuel Poncé</a></li></ol><h3 id="EPW编译"><a href="#EPW编译" class="headerlink" title="EPW编译"></a>EPW编译</h3><ol><li>下载<a href="http://www.wannier.org/" target="_blank" rel="noopener">Wannier90 (v3.0.0)</a>，并重命名为v3.0.0.tar.gz，然后拷贝到QE下的archive文件夹下。</li><li>编译<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> epw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>测试<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> test-suite<span class="token function">make</span> run-tests-epw-parallel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>如果测试结果为全部通过，则可以使用EPW软件计算了。</li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://blog.sciencenet.cn/blog-2909108-1152511.html" target="_blank" rel="noopener">QE使用经验总结：（一）编译</a></li><li><a href="https://www.youtube.com/playlist?list=PLGntAYRT8AVk9EV5Fm8qRboc3RCReTqGm" target="_blank" rel="noopener">Hands-on: Quantum Espresso Tutorial 2019</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Quantum ESPRESSO </category>
          
          <category> EPW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quantum ESPRESSO </tag>
            
            <tag> EPW </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
